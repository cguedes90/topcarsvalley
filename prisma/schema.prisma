// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id              String    @id @default(cuid())
  name            String?
  email           String    @unique
  emailVerified   DateTime?
  image           String?
  password        String?
  phone           String?
  role            UserRole  @default(MEMBER)
  isActive        Boolean   @default(true)
  inviteToken     String?   @unique
  inviteUsedAt    DateTime?
  resetToken      String?   @unique
  resetTokenExpiry DateTime?
  createdAt       DateTime  @default(now())
  updatedAt       DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  eventRSVPs      EventRSVP[]
  invitedUsers    User[]    @relation("UserInvites")
  invitedBy       User?     @relation("UserInvites", fields: [invitedById], references: [id])
  invitedById     String?
  profile         UserProfile?
  vehicles        Vehicle[]
  vehicleLikes    VehicleLike[]
  vehicleComments VehicleComment[]

  @@map("users")
}

model UserProfile {
  id          String    @id @default(cuid())
  userId      String    @unique
  birthDate   DateTime?
  cep         String?
  city        String?
  state       String?
  carBrand    String?
  carModel    String?
  carYear     Int?
  bio         String?   @db.Text
  avatar      String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_profiles")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

enum UserRole {
  ADMIN
  MEMBER
}

model Event {
  id                    String      @id @default(cuid())
  title                 String
  description           String      @db.Text
  shortDescription      String?
  date                  DateTime
  time                  String
  location              String
  maxParticipants       Int
  category              EventCategory
  price                 String
  isPublic              Boolean     @default(true)
  isActive              Boolean     @default(true)
  image                 String?
  createdAt             DateTime    @default(now())
  updatedAt             DateTime    @updatedAt

  rsvps                 EventRSVP[]

  @@map("events")
}

enum EventCategory {
  TRACK_DAY
  ENCONTRO
  WORKSHOP
  ROAD_TRIP
  EXPOSICAO
  COMPETICAO
}

model EventRSVP {
  id          String      @id @default(cuid())
  eventId     String
  userId      String
  status      RSVPStatus  @default(CONFIRMED)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  event       Event       @relation(fields: [eventId], references: [id], onDelete: Cascade)
  user        User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@map("event_rsvps")
}

enum RSVPStatus {
  PENDING
  CONFIRMED
  CANCELLED
}

model Contact {
  id          String      @id @default(cuid())
  name        String
  email       String
  phone       String?
  company     String?
  subject     ContactSubject
  message     String      @db.Text
  status      ContactStatus @default(PENDING)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("contacts")
}

enum ContactSubject {
  INVITE_REQUEST
  PARTNERSHIP
  SUPPORT
  EVENT_INFO
  OTHER
}

enum ContactStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model Partner {
  id          String      @id @default(cuid())
  name        String
  description String      @db.Text
  logo        String?
  website     String?
  category    PartnerCategory
  isActive    Boolean     @default(true)
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt

  @@map("partners")
}

enum PartnerCategory {
  AUTOMOTIVE
  TECHNOLOGY
  LIFESTYLE
  SERVICES
  MEDIA
}

model Vehicle {
  id            String    @id @default(cuid())
  brand         String
  model         String
  year          Int
  color         String
  fuelType      String
  horsepower    Int?
  description   String?   @db.Text
  photos        String[]
  isPublic      Boolean   @default(true)
  ownerId       String
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  owner         User      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  likes         VehicleLike[]
  comments      VehicleComment[]

  @@map("vehicles")
}

model VehicleLike {
  id          String    @id @default(cuid())
  vehicleId   String
  userId      String
  createdAt   DateTime  @default(now())

  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([vehicleId, userId])
  @@map("vehicle_likes")
}

model VehicleComment {
  id          String    @id @default(cuid())
  vehicleId   String
  userId      String
  content     String    @db.Text
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  vehicle     Vehicle   @relation(fields: [vehicleId], references: [id], onDelete: Cascade)
  user        User      @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("vehicle_comments")
}
